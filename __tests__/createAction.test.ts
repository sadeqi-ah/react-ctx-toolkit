import { createAction } from "../lib"

describe("createAction", () => {
    test("should create an action", () => {
        const testAction = createAction<string>("test-type")
        expect(testAction("test-payload")).toEqual({
            type: "test-type",
            payload: "test-payload",
        })
    })

    describe("get action type", () => {
        test("convert to string", () => {
            const testAction = createAction("test-type")
            expect(`${testAction}`).toEqual("test-type")
        })
        test("action.type", () => {
            const testAction = createAction("test-type")
            expect(testAction.type).toEqual("test-type")
        })
    })

    describe("when passing a prepareAction method", () => {
        test("signle argument", () => {
            const testAction = createAction("sayHello", (name: string) => ({
                payload: "Hello " + name,
            }))
            expect(testAction("world!")).toEqual({
                type: "sayHello",
                payload: "Hello world!",
            })
        })

        test("multiple arguments", () => {
            const testAction = createAction("sum", (a: number, b: number, c: number) => ({
                payload: a + b + c,
            }))
            expect(testAction(1, 1, 1)).toEqual({
                type: "sum",
                payload: 3,
            })
        })
    })

    describe("match method", () => {
        test("should return true for actions generated by own actionCreator", () => {
            const actionCreator = createAction("test")
            expect(actionCreator.match(actionCreator())).toBe(true)
        })

        test("should return true for matching actions", () => {
            const actionCreator = createAction("test")
            expect(actionCreator.match({ type: "test" })).toBe(true)
        })

        test("should return false for other actions", () => {
            const actionCreator = createAction("test")
            expect(actionCreator.match({ type: "test:)" })).toBe(false)
        })
    })
})
